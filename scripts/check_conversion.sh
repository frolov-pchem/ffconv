#!/bin/bash
# Andrey I. Frolov, Jan 2014, ISC RAS, Ivanovo, Russia
#
#   Copyright 2014 Andrey I. Frolov
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# TODO:
# unitconv.py !

###------------------------------------------------------------------------------
### Default parameters
confpath=./confs
if [ -z "$FFCONVPATH" ]; then
    echo -e "........ Note in $0: FFCONVPATH env variable not set. Try to deduce the path to ffconv installation by:"
    echo -e '            which ffconv.py | sed "s:/ffconv.py::g"'
    echo -e "........ Note in $0: if --ffconvpath given then this will be overwritten"
    FFCONVPATH=`which ffconv.py | sed "s:/ffconv.py::g"`
else
    FFCONVPATH=${FFCONVPATH}
fi
compareonly=''
DBpath=$HOME/top
lDBstore2='yes'
lDBstore1='no'
lDBstoreff='no'

###------------------------------------------------------------------------------
### Vars
scriptsdir=$FFCONVPATH/scripts




BriefUsage="------------------------------------------------------------------------------------------------------------
BRIEF USAGE (for $0)

Example usages:

\$FFCONVPATH/scripts/check_conversion.sh --mol paracetamol --fromprog FFLDSERVER --toprog GROMACS --confpath \`pwd\` --ldbstore yes --dbpath \$HOME/top --ffname oplsaa

\$FFCONVPATH/scripts/check_conversion.sh --mol paracetamol --fromprog CHARMM --toprog GROMACS --confpath \`pwd\`  --dbpath \$HOME/top --ffname cgenff2b7 --charmm-ff-prm ~/top/CHARMM/cgenff2b7/par_all36_cgenff.prm --charmm-ff-rtf ~/top/CHARMM/cgenff2b7/top_all36_cgenff.rtf --gmx-ff-itp \`pwd\`/par_all36_cgenff.prm.itp --ldbstore1 yes  --ldbstore2 yes

More examples can be found in \$FFCONVPATH/EXAMPLE_<PROGNAME>/EXAMPLE_USAGE files.


  GENERAL AND I/O OPTIONS:
    --fromprog       - program name to convert from. E.g. CHARMM, AMBER, FFLDCONV
    --toprog         - program name to conver to. E.g. GROMACS, AMBER, RISMMOL
    --mol            - name of the molecule (defines the names of input files)
    --confpath       - [default: ${confpath}] path to where PDB file(s) with coordinates of molecule located.
                       if many present and lskipcheck != yes: then energies of configuration from all pdb files 
                       are used to check the correctness of conversion.
    --ffconvpath     - [default: \$FFCONVPATH] path to ffconv distribution. If FFCONV not defined then the path set 
                       to location of ffconv.py executable.
    --charmm-ff-prm  - charmm PRM force field file (only used when to- or fromprog is CHARMM)
    --charmm-ff-rtf  - charmm RTF force field file (only used when to- or fromprog is CHARMM)
    --gmx-ff-itp     - gromacs ITP force field file (only used when to- or fromprog is GROMACS) 

  OPTIONS FOR THE ENERGYCOMPARISON:
    --compareonly    - comma separated list of energy field to use in energy comparisonin. E.g. E_ELEC,E_VDW.
                       If not given all the common fields of toprog and fromprog outputs will be used for 
                       energy comparison. At least E_POT must be present for both programs.
    --lskipcheck     - [default: ${lskipcheck}] skip correctness of conversion

  STORING IN LOCAL FORCE FILED DATABASE OPTIONS:
    --dbpath         - path to the local topology database
    --ldbstoreff     - [default: ${lDBstoreff}] store the FF files provided  by --gmx-ff-itp, 
                       --charmm-ff-prm, --charmm-ff-rtp to local topology database? [yes/no]
    --ldbstore1      - [default: ${lDBstore1}] store files for the fromprog format ?
    --ldbstore2      - [default: ${lDBstore2}] store files for the toprog format ?
    --ffname         - name of the force field in the local database
    --ffname1        - [default: --ffname] name of the force field for the fromprog files
    --ffname2        - [default: --ffname] name of the force field for the toprog files     
    -h               - print help
"

HelpMessage="-------------------------------------------------------------------------
Help message for $0

DESCRIPTION

This script performs check if the force filed file conversion done by ffconv.py was correct. This is done by
comparison of different energy terms for single molecule configuration(s) calculated for the initial force field 
and toplogy files and ones generated by ffconv.py. For the energy evaluations you should have the corresponding 
software installed: for GROMACS: Gromacs in double presision (executable with _d suffix), for CHARMM: charmm, 
for AMBER: namd2, for FFLDSERVER: ffld_server from Schrodinger Maestro, utilities therein (free for academia). 
If the energy terms differ no more than 0.1 kJ/mol, then the conversion is correct. 

The script allows to store the force field date to local topology database. The stored FF files can be used for
automated topology file generation for gromacs run by run_md.sh script 
(see http://frolov-pchem.wikispace.com/Downloads). Local topology database is organized as follows:
<PROGRAM_NAME>/<FORCE_FIELD_NAME>/<MOLECULE_NAME>/. Folder FORCE_FILED_NAME contanes common FF files in the 
format of PROGRAM_NAME for all stored molecules. MOLECULE_NAME folders contain FF files and topology files
for given molecule in the format of PROGRAM_NAME. More details on the local topology database can be found in
\$FFCONVPATH/LOCAL_TOPOLOGY_INFO

${BriefUsage}

"



if [ -z "$*" ]; then
    echo >&2 -e "$BriefUsage"
    echo >&2 -e "! Error in $0: no cmd line arguments given. Aborting.\n"; exit 1;
fi

###------------------------------------------------------------------------------
### Parse command line arguments
echo -e "Running: $0 $* \n"
while [ $# -gt 0 ] ; do
  case $1
  in
    --fromprog)
      fromprog=$2; shift 2 
    ;;
    --toprog)
      toprog=$2; shift 2 
    ;;
    --mol)
      mol=$2; shift 2 
    ;;
    --confpath)
      confpath=$2; shift 2
    ;;
    --ffconvpath)
      FFCONVPATH=$2; shift 2 
    ;;
    --charmm-ff-prm)
      charmmffprm=$2; shift 2 
    ;;
    --charmm-ff-rtf)
      charmmffrtf=$2; shift 2 
    ;;
    --gmx-ff-itp)
      gmxffitp=$2; shift 2 
    ;;
    --compareonly)
      compareonly=$2; shift 2 
    ;;
    --dbpath)
      DBpath=$2; shift 2 
    ;;
    --ldbstoreff)
      lDBstoreff=$2; shift 2 
    ;;
    --ldbstore1)
      lDBstore1=$2; shift 2 
    ;;
    --ldbstore2)
      lDBstore2=$2; shift 2 
    ;;
    --ffname)
      ffname=$2; shift 2 
    ;;
    --ffname1)
      ffname1=$2; shift 2 
    ;;
    --ffname2)
      ffname2=$2; shift 2 
    ;;
    --lskipcheck)
      lskipcheck=$2; shift 2 
    ;;
    -h)
      shift 1;
      echo -e "$HelpMessage"; exit 0
    ;;
    *)
      echo >&2 -e "$BriefUsage"
      echo >&2 -e "!Error in ["$0"]: the command line argument [$1] not known. Aborting.\n" ; exit 1;
    ;;
  esac
done


###------------------------------------------------------------------------------
### Checks

if [ -f "MOLFILES" ]; then
    echo >&2 -e "--- !Warning in ["$0"]: MOLFILES exists. Backup it and clear. Continue.\n" ; 
    bk.sh MOLFILES
    rm -f MOLFILES
    touch MOLFILES
fi

if [ -f "FFFILES" ]; then
    echo >&2 -e "--- !Warning in ["$0"]: FFFILES exists. Backup it and clear. Continue.\n" ; 
    bk.sh FFFILES
    rm -f FFFILES
    touch FFFILES
fi


# --- Check if empty
for var in  "${confpath}"  "${mol}" "${FFCONVPATH}" "${fromprog}" "${toprog}" "${lDBstore2}" ; do
    if [ -z "${var}" ]; then
        echo >&2 -e "--- !Error in $0: confpath, mol, ffconvpath, fromprog, toprog, ldbstore2 must NOT be empty. Now they are ["${confpath}"],["${mol}"],["${ffconvpath}"],["${fromprog}"],["${toprog}"],["${ldbstore}"]. Aborting.\n"; exit 1
    fi
done



###-------------------------------------------------------------------------------------------------------------------
######################################################################################################################
### Perfrom conversion check
######################################################################################################################


###------------------------------------------------------------------------------
### Special keys definitions

## Special keys for CHARMM
skcharmm=" --charmm-ff-prm $charmmffprm --charmm-ff-rtf $charmmffrtf"
if [ "${fromprog}" == "CHARMM" ]; then
    specialkeys1=$skcharmm
elif [ "${toprog}" == "CHARMM" ]; then
    specialkeys2=$skcharmm
fi


### Special keys for AMBER
#skamber=" --scee 1.2 --scnb 2.0 "
#if [ "${fromprog}" == "AMBER" ]; then
#    specialkeys1=$skamber 
#elif [ "${toprog}" == "AMBER" ]; then
#    specialkeys2=$skamber
#fi

## Special keys for GROMACS
if [ ! -z "$gmxffitp" ]; then
    skgmx=" --gmx-ff-itp ${gmxffitp} "
fi
if [ "${fromprog}" == "GROMACS" ]; then
    specialkeys1=$skgmx 
elif [ "${toprog}" == "GROMACS" ]; then
    specialkeys2=$skgmx
fi
    
## Special keys: if not all energy terms should be compared
if [ ! -z "$compareonly" ]; then
    cokey="--compareonly ${compareonly}"
else
    cokey=""
fi

## Special keys if should skip energy comparison
if [ "$lskipcheck" == "yes" ]; then
    lskipcheckkey="--lskipcheck yes" 
fi
    

### Run energy evaluation for fromprog
echo -e "---$fromprog" >> MOLFILES
echo -e "---$fromprog" >> FFFILES
    cmd="$scriptsdir/run_${fromprog}.sh --mol ${mol} --ffconvpath $FFCONVPATH --confpath $confpath   $specialkeys1  $lskipcheckkey "
    eval $cmd ; if [ $? -ne 0 ]; then { echo >&2 -e "--- !Error: [$cmd] failed. Aborting.\n" ; exit 1; } fi

### Run energy evaluation for toprog
echo -e "---$toprog" >> MOLFILES
echo -e "---$toprog" >> FFFILES
    cmd="$scriptsdir/run_${toprog}.sh --mol ${mol} --ffconvpath $FFCONVPATH --confpath $confpath     $specialkeys2  $lskipcheckkey "
    eval $cmd ; if [ $? -ne 0 ]; then { echo >&2 -e "--- !Error: [$cmd] failed. Aborting.\n" ; exit 1; } fi
echo -e "---end" >> MOLFILES
echo -e "---end" >> FFFILES

### Run energy comparison
if [ "$lskipcheck" != 'yes' ]; then
    success=`$scriptsdir/compare_E.sh --ffconvpath $FFCONVPATH --fromprog $fromprog --toprog $toprog --confpath $confpath     $cokey `
    if [ $? -ne 0 ]; then { echo >&2 -e "--- !Error: [$scriptsdir/compare_E.sh] failed. Aborting.\n" ; exit 1; } fi
    lsuccess=`echo $success | grep "SUCCESS" | wc -l`

    echo -e "${success}"
    echo -e ""

    if [ "$lsuccess" -lt "1" ]; then
        # Failed

        if [ "$lDBstore1" == 'yes' -o "$lDBstore2" == 'yes' ]; then
            echo >&2 -e "--- !Error in [$0]: due energy mismatch after conversion the data for mol [$mol] not stored in the database [$DBpath]. "
        fi
        echo >&2 -e "--- Aborting."
        exit 1
    else
        echo -e ""
        echo -e "################################################################################################################"
        echo -e "### SUCCESS: topology conversion was right"
        echo -e "################################################################################################################"
        echo -e ""
    fi

fi


###-------------------------------------------------------------------------------------------------------------------
######################################################################################################################
### Storing to local DB
######################################################################################################################

if [ "$lDBstore1" == 'yes' -o "$lDBstore2" == 'yes' ]; then

    echo -e ""
    echo -e "################################################################################################################"
    echo -e "### PUT TO DB: Storing the topology in the local database: ${DBpath}"
    echo -e "################################################################################################################"
    echo -e ""

    ### Several checks    

    if [ -z "$ffname1" -a -z "$ffname2" ]; then
        # ffname should be given
        # ffname1 and ffname2 should be used only if the force filed is not fully converted. E.g. you generate AMBER topoly only with nonbonded interactions present for single-point 3D-RISM calculations. In most cases this is not needed. Therefore script expects only one ffname to be given.
        if [ -z "$ffname" ]; then
            echo >&2 -e "--- !Error in ["$0"]: ffname empty AND (ffname1 and ffname2) are empty at the same time. One of the two should be given. Do not know the FF name. Aborting.\n" ; exit 1 
        else
            ffname1=$ffname ; ffname2=$ffname
        fi
    fi

    if [ -z "$ffname1" ]; then
        echo >&2 -e "--- !Error in ["$0"]: ffname1 empty but ffname2 not. Maybe just specify ffname? Aborting.\n" ; exit 1 
    fi

    if [ -z "$ffname2" ]; then
        echo >&2 -e "--- !Error in ["$0"]: ffname2 empty but ffname1 not. Maybe just specify ffname? Aborting.\n" ; exit 1 
    fi

    if [ ! -d "$DBpath" ]; then
        echo >&2 -e "--- !Error in ["$0"]: the path to database points to nonexisting folder [$DBath]. Aborting.\n" ; exit 1 
    fi

    if [ ! -f "FFFILES" ]; then
        echo >&2 -e "--- !Error in ["$0"]: FFFILES file does not exist. Aborting.\n" ; exit 1 
    fi

    if [ ! -f "MOLFILES" ]; then
        echo >&2 -e "--- !Error in ["$0"]: MOLFILES file does not exist. Aborting.\n" ; exit 1 
    fi




### Choose what to store to DB
if [ "$lDBstore1" == 'yes' -a "$lDBstore2" == 'yes' ]; then
    progs_list=( "$fromprog" "$toprog" )
    ff_list=( "$ffname1" "$ffname2" )
elif [ "$lDBstore1" == 'yes' ]; then
    progs_list=( "$fromprog" )
    ff_list=( "$ffname1" )
elif [ "$lDBstore2" == 'yes' ]; then
    progs_list=( "$toprog" )
    ff_list=( "$ffname2" )
fi

### loop over program names
cnt=-1
for prog in ${progs_list[*]} ; do
    
    cnt=$(($cnt+1))
    ff=${ff_list[$cnt]}

    echo -e ""
    echo -e "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    echo -e "+++ PUT TO DB mol [$mol], prog [$prog], FF [$ff] "
    echo -e ""


    # check if the folder for given program exists in DB 
    p1="${DBpath}"/"${prog}"
    if [ ! -d "$p1" ]; then
        echo >&2 -e "--- !Warning in ["$0"]: directory [${p1}] not exist. Creating it. Continue.\n" ; 
        mkdir "$p1"
    fi

    # check if the folder for given FF program exists in DB for given program 
    p2="$p1"/"$ff"
    if [ ! -d "$p2" ]; then
        echo >&2 -e "--- !Warning in ["$0"]: directory [${p2}] not exist. Creating it. Continue.\n" ; 
        mkdir "$p2"
    fi

    # check if the folder for given molecule exists in DB for given program and FF 
    p3="$p2"/"$mol"
    if [ -d "$p3" ]; then
        echo >&2 -e "--- !Warning in ["$0"]: directory [${p3}] exists - the molecule [${mol}] topology already exist. Backup the directory and refill all the data. Continue.\n" ; 
        cmd="bk.sh $p3"
        eval $cmd ; if [ $? -ne 0 ]; then { echo >&2 -e "--- !Error: [$cmd] failed. Aborting.\n" ; exit 1; } fi
        rm -rf "$p3"
    fi
    mkdir "$p3"
    mkdir "$p3"/tmp
   
if [ "$lDBstoreff" == 'yes' ]; then
    # loop over the files relevant for the whole FF
    for f in `cat FFFILES | awk '/--'$prog'/ {flag=1;next} /--/{flag=0} flag {print}' | awk -F '/' '{print $NF}'` ; do
        if [ -f "$p2"/"$f" ]; then
            if [ ! -d "$p3"/tmp ]; then
                mkdir "$p3"/tmp
            fi
    
            pf=${p3}/tmp/${f}  
            echo >&2 -e "--- !Warning in ["$0"]: file [${p2}/${f}] already exists. DO NOT Overwrite but keep the new file in [${pf}]. Continue.\n" ; 
            #mv  $p2/$f  $pf
            cp  $f      $p2/

        else
            echo >&2 -e "........ Note in ["$0"]: copy file [${f}] to folder [${p2}].  Continue.\n"  
            cp ${f} ${p2}/
        fi

    done
fi

    # loop over the files for given molecule
    for f in `cat MOLFILES | awk '/--'$prog'/ {flag=1;next} /--/{flag=0} flag {print}' | awk -F '/' '{print $NF}' ` ; do
            echo >&2 -e "........ Note in ["$0"]: copy file [${f}] to folder [${p3}].  Continue.\n"  
            cp ${f} ${p3}/
    done

done

fi



